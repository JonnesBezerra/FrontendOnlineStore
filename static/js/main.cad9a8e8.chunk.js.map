{"version":3,"sources":["icons/shopping-cart-logo.png","Components/CartButton.jsx","Components/Product.jsx","services/api.js","Components/ProductsList.jsx","Components/ListCategories.jsx","Pages/MainPage.jsx","Pages/ShoppingCart.jsx","Components/Header.jsx","services/newapi.js","Pages/ProductDetails.jsx","Components/Forms/CheckoutForm.jsx","Pages/Checkout.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","CartButton","countCartItems","props","shoppingCartItens","reduce","prev","curr","quantity","to","data-testid","className","this","Component","Product","title","img","price","id","addToCartHandler","src","alt","onClick","onKeyUp","event","key","role","tabIndex","type","getCategories","a","fetch","fetchCategories","json","categories","getProductsFromCategoryAndQuery","categoryId","query","fetchCategoriesQuery","categoryQuery","ProductsList","getList","categoryID","results","setState","products","state","map","product","thumbnail","ListCategories","handleListCategories","cat","renderCategory","handleCategoryClick","name","MainPage","doQuery","searchWords","value","target","renderSearchBar","onChange","renderInitialPhrase","ShoppingCart","renderEmptyMsg","renderCartList","changeItemQuantity","removeItem","length","console","log","Header","logo","productId","fetchId","getProductById","ProductDetails","getProduct","match","params","resp","CheckoutForm","Checkout","App","index","findIndex","splice","bool","find","newCartItem","push","path","render","exact","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cad9a8e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/shopping-cart-logo.81c2fb57.png\";","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nclass CartButton extends Component {\n  countCartItems = () => {\n    const { shoppingCartItens } = this.props;\n    const total = shoppingCartItens.reduce((prev, curr) => prev + curr.quantity, 0);\n    return total;\n  }\n\n  render() {\n    // const { shoppingCartItens } = this.props;\n    return (\n      <ul>\n        <li>\n          <Link\n            to=\"/shopping-cart\"\n            data-testid=\"shopping-cart-button\"\n            className=\"cart position-relative\"\n          >\n            <i className=\"fas fa fa-shopping-cart fa-lg\" />\n            <span\n              className=\"cart-basket d-flex justify-content-center\"\n              data-testid=\"shopping-cart-size\"\n            >\n              { this.countCartItems() }\n            </span>\n          </Link>\n        </li>\n      </ul>\n    );\n  }\n}\n\nCartButton.propTypes = {\n  shoppingCartItens: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default CartButton;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nclass Product extends Component {\n  render() {\n    const { title, img, price, id, addToCartHandler } = this.props;\n    return (\n      <section data-testid=\"product\" id={ id } className=\"product-card\">\n        <div className=\"product-title\">{ title }</div>\n        <div className=\"product-img-ctn\">\n          <div>\n            <img className=\"product-img\" src={ img } alt={ title } />\n          </div>\n        </div>\n        <div\n          data-testid=\"product-add-to-cart\"\n          className=\"add-to-cart\"\n          onClick={ () => addToCartHandler(id, title, price) }\n          onKeyUp={ (event) => {\n            if (event.key === 'Enter') {\n              addToCartHandler(id, title, price);\n            }\n          } }\n          role=\"button\"\n          tabIndex=\"0\"\n        >\n          Adicionar ao carrinho\n        </div>\n        <div className=\"price-tag\">{ `R$ ${price}` }</div>\n        <Link to={ `/${id}` }>\n          <button data-testid=\"product-detail-link\" type=\"button\">Ver Detalhes</button>\n        </Link>\n      </section>\n    );\n  }\n}\n\nProduct.propTypes = {\n  title: PropTypes.string,\n  price: PropTypes.number,\n  img: PropTypes.string,\n}.isRequired;\n\nexport default Product;\n","export async function getCategories() {\n  const fetchCategories = await fetch('https://api.mercadolibre.com/sites/MLB/categories');\n  const categories = await fetchCategories.json();\n  return categories;\n}\n\nexport async function getProductsFromCategoryAndQuery(categoryId, query) {\n  const fetchCategoriesQuery = await fetch(`https://api.mercadolibre.com/sites/MLB/search?category=${categoryId}&q=${query}`);\n  const categoryQuery = await fetchCategoriesQuery.json();\n  return categoryQuery;\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Product from './Product';\nimport { getProductsFromCategoryAndQuery } from '../services/api';\n\nclass ProductsList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      products: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getList();\n  }\n\n  getList = async () => {\n    const { query, categoryID } = this.props;\n    const { results } = await getProductsFromCategoryAndQuery(categoryID, query);\n    // results is a key of the response's API\n    this.setState({\n      products: results,\n    });\n  }\n\n  render() {\n    const { products } = this.state;\n    const { addToCartHandler } = this.props;\n    return (\n      <div className=\"products-list\">\n        { products.map((product) => (<Product\n          key={ product.id }\n          id={ product.id }\n          title={ product.title }\n          img={ product.thumbnail }\n          price={ product.price }\n          addToCartHandler={ addToCartHandler }\n        />)) }\n      </div>\n    );\n  }\n}\n\nProductsList.propTypes = {\n  query: PropTypes.string.isRequired,\n  categoryID: PropTypes.string.isRequired,\n  addToCartHandler: PropTypes.func.isRequired,\n};\n\nexport default ProductsList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { getCategories } from '../services/api';\n\nclass ListCategories extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      categories: [],\n    };\n  }\n\n  componentDidMount() {\n    this.handleListCategories();\n  }\n\n  handleListCategories = async () => {\n    const cat = await getCategories();\n    this.setState({\n      categories: cat,\n    });\n  }\n\n  renderCategory = () => {\n    const { categories } = this.state;\n    const { handleCategoryClick } = this.props;\n\n    return (\n      categories.map(({ name, id }) => (\n        <button\n          type=\"button\"\n          key={ id }\n          data-testid=\"category\"\n          onClick={ () => handleCategoryClick(id) }\n          className=\"category-btn\"\n        >\n          { name }\n        </button>\n      ))\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"category-list\">\n        { this.renderCategory() }\n      </div>\n    );\n  }\n}\n\nListCategories.propTypes = {\n  handleCategoryClick: PropTypes.func.isRequired,\n};\n\nexport default ListCategories;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport CartButton from '../Components/CartButton';\nimport ProductsList from '../Components/ProductsList';\nimport ListCategories from '../Components/ListCategories';\n\nclass MainPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      query: '',\n      doQuery: false,\n      categoryID: '',\n    };\n  }\n\n  handleCategoryClick = (categoryID) => {\n    this.setState({\n      categoryID,\n      doQuery: true,\n    });\n  };\n\n  searchWords = (event) => {\n    const { value } = event.target;\n    this.setState({ query: value });\n  };\n\n  renderSearchBar = () => {\n    const { query } = this.state;\n\n    return (\n      <div className=\"search\">\n        <input\n          type=\"text\"\n          id=\"search-bar\"\n          value={ query }\n          data-testid=\"query-input\"\n          onChange={ (event) => this.searchWords(event) }\n          onKeyUp={ (event) => {\n            if (event.key === 'Enter') this.setState({ doQuery: true });\n          } }\n        />\n        <button\n          type=\"button\"\n          onClick={ () => this.setState({ doQuery: true }) }\n          data-testid=\"query-button\"\n        >\n          Search\n        </button>\n      </div>\n    );\n  };\n\n  renderInitialPhrase = () => (\n    <p data-testid=\"home-initial-message\">\n      Digite algum termo de pesquisa ou escolha uma categoria.\n    </p>\n  );\n\n  render() {\n    const { query, doQuery, categoryID } = this.state;\n    const { addToCartHandler, shoppingCartItens } = this.props;\n    return (\n      <main>\n        <ListCategories handleCategoryClick={ this.handleCategoryClick } />\n        <section className=\"article\">\n          <div className=\"top-page\">\n            {this.renderSearchBar()}\n            <CartButton shoppingCartItens={ shoppingCartItens } />\n          </div>\n          {doQuery ? (\n            <ProductsList\n              query={ query }\n              categoryID={ categoryID }\n              addToCartHandler={ addToCartHandler }\n            />\n          ) : (this.renderInitialPhrase())}\n        </section>\n      </main>\n    );\n  }\n}\n\nMainPage.propTypes = {\n  addToCartHandler: PropTypes.func.isRequired,\n  shoppingCartItens: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default MainPage;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n// Req 12 :\nimport { Link } from 'react-router-dom';\n\nclass ShoppingCart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.shoppingCartItens = props.shoppingCartItens;\n  }\n\n  renderEmptyMsg = () => (\n    <p data-testid=\"shopping-cart-empty-message\">Seu carrinho está vazio</p>\n  );\n\n  renderCartList = () => {\n    const { changeItemQuantity, removeItem } = this.props;\n    return (\n      <div className=\"shopping-cart-list\">\n        {this.shoppingCartItens.map((product) => (\n          <div key={ product.id }>\n            <div data-testid=\"shopping-cart-product-name\">{product.title}</div>\n            <div data-testid=\"shopping-cart-product-quantity\">\n              {product.quantity}\n            </div>\n            <button\n              type=\"button\"\n              data-testid=\"product-increase-quantity\"\n              onClick={ () => changeItemQuantity(product.id, true) }\n            >\n              +\n            </button>\n            <button\n              type=\"button\"\n              data-testid=\"product-decrease-quantity\"\n              onClick={ () => changeItemQuantity(product.id, false) }\n            >\n              -\n            </button>\n            <button type=\"button\" onClick={ () => removeItem(product.id) }>\n              X\n            </button>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <section>\n        {this.shoppingCartItens.length === 0\n          ? this.renderEmptyMsg()\n          : this.renderCartList() }\n        {/* Req 12 */}\n        <Link to=\"/shopping-cart/checkout\">\n          <button\n            type=\"button\"\n            data-testid=\"checkout-products\"\n            onClick={ () => console.log('oi bobo') }\n          >\n            Checkout\n          </button>\n        </Link>\n      </section>\n    );\n  }\n}\n\nShoppingCart.propTypes = {\n  shoppingCartItens: PropTypes.arrayOf(PropTypes.object),\n  changeItemQuantity: PropTypes.func,\n  removeItem: PropTypes.func,\n}.isRequired;\n\nexport default ShoppingCart;\n","import React, { Component } from 'react';\nimport logo from '../icons/shopping-cart-logo.png';\n\nclass Header extends Component {\n  render() {\n    return (\n      <header className=\"shopping-cart-header\">\n        <img className=\"page-title\" src={ logo } alt=\"logo\" />\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","async function getProductById(productId) {\n  const fetchId = await fetch(`https://api.mercadolibre.com/items/${productId}`);\n  const product = await fetchId.json();\n  return product;\n}\n\nexport default getProductById;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport getProductById from '../services/newapi';\nimport CartButton from '../Components/CartButton';\n\nclass ProductDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      product: '',\n    };\n  }\n\n  componentDidMount() {\n    this.getProduct();\n  }\n\n  getProduct = async () => {\n    const { match: { params: { id } } } = this.props;\n    const resp = await getProductById(id);\n    this.setState({\n      product: resp,\n    });\n  }\n\n  render() {\n    const { product } = this.state;\n    const { addToCartHandler, shoppingCartItens } = this.props;\n    return (\n      <div>\n        <div>\n          <p data-testid=\"product-detail-name\">{ product.title }</p>\n        </div>\n        <div\n          data-testid=\"product-detail-add-to-cart\"\n          className=\"add-to-cart\"\n          onClick={ () => addToCartHandler(product.id, product.title, product.price) }\n          onKeyUp={ (event) => {\n            if (event.key === 'Enter') {\n              addToCartHandler(product.id, product.title, product.price);\n            }\n          } }\n          role=\"button\"\n          tabIndex=\"0\"\n        >\n          Adicionar ao carrinho\n        </div>\n        <CartButton shoppingCartItens={ shoppingCartItens } />\n      </div>\n    );\n  }\n}\n\nProductDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n  }).isRequired,\n  addToCartHandler: PropTypes.func.isRequired,\n  shoppingCartItens: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default ProductDetails;\n","import React, { Component } from 'react';\n\nclass CheckoutForm extends Component {\n  render() {\n    return (\n      <form>\n        <div>\n          <input type=\"text\" data-testid=\"checkout-fullname\" />\n          <input type=\"text\" data-testid=\"checkout-email\" />\n          <input type=\"text\" data-testid=\"checkout-cpf\" />\n          <input type=\"text\" data-testid=\"checkout-phone\" />\n          <input type=\"text\" data-testid=\"checkout-cep\" />\n          <input type=\"text\" data-testid=\"checkout-address\" />\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default CheckoutForm;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport CheckoutForm from '../Components/Forms/CheckoutForm';\n\nclass Checkout extends Component {\n  constructor(props) {\n    super(props);\n\n    this.shoppingCartItens = props.shoppingCartItens;\n  }\n\n  renderEmptyMsg = () => (\n    <p data-testid=\"shopping-cart-empty-message\">Seu carrinho está vazio</p>\n  );\n\n  renderCartList = () => (\n    <div className=\"shopping-cart-list\">\n      {this.shoppingCartItens.map((product) => (\n        <div key={ product.id }>\n          <div data-testid=\"shopping-cart-product-name\">{product.title}</div>\n          <div data-testid=\"shopping-cart-product-quantity\">\n            {product.quantity}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  render() {\n    return (\n      <div>\n        <div>\n          {this.shoppingCartItens.length === 0\n            ? this.renderEmptyMsg()\n            : this.renderCartList() }\n        </div>\n        <CheckoutForm />\n      </div>\n    );\n  }\n}\n\nCheckout.propTypes = {\n  shoppingCartItens: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\nexport default Checkout;\n","// Agradecimentos ao Daniel Roberto Turma 10 Tribo B, Lucas Martins Turma 10 Tribo B\n\nimport React, { Component } from 'react';\nimport { Switch, Route, HashRouter as Router } from 'react-router-dom';\n\nimport './App.css';\n\nimport MainPage from './Pages/MainPage';\nimport ShoppingCart from './Pages/ShoppingCart';\nimport Header from './Components/Header';\nimport ProductDetails from './Pages/ProductDetails';\nimport Checkout from './Pages/Checkout';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      shoppingCartItens: [],\n    };\n  }\n\n  removeItem = (id) => {\n    const { shoppingCartItens } = this.state;\n    const index = shoppingCartItens.findIndex((product) => product.id === id);\n    shoppingCartItens.splice(index, 1);\n    this.setState({ shoppingCartItens });\n  }\n\n  changeItemQuantity = (id, bool) => {\n    const { shoppingCartItens } = this.state;\n    const index = shoppingCartItens.findIndex((product) => product.id === id);\n    if (bool) {\n      shoppingCartItens[index].quantity += 1;\n    } else if (shoppingCartItens[index].quantity > 1) {\n      shoppingCartItens[index].quantity -= 1;\n    } else {\n      shoppingCartItens.splice(index, 1);\n    }\n    this.setState({ shoppingCartItens });\n  }\n\n  addToCartHandler = (id, title, price) => {\n    const { shoppingCartItens } = this.state;\n\n    if (shoppingCartItens.find((product) => product.id === id)) {\n      const index = shoppingCartItens.findIndex((product) => product.id === id);\n      shoppingCartItens[index].quantity += 1;\n    } else {\n      const newCartItem = {\n        id,\n        title,\n        price,\n        quantity: 1,\n      };\n      shoppingCartItens.push(newCartItem);\n    }\n\n    this.setState({ shoppingCartItens });\n  };\n\n  render() {\n    const { shoppingCartItens } = this.state;\n    return (\n      <div>\n        <Router>\n          <Header />\n          <Switch>\n            <Route\n              path=\"/shopping-cart/checkout\"\n              render={ () => (<Checkout shoppingCartItens={ shoppingCartItens } />) }\n            />\n            <Route\n              path=\"/shopping-cart\"\n              render={ () => (\n                <ShoppingCart\n                  shoppingCartItens={ shoppingCartItens }\n                  changeItemQuantity={ this.changeItemQuantity }\n                  removeItem={ this.removeItem }\n                />\n              ) }\n            />\n            <Route\n              path=\"/:id\"\n              render={ (props) => (<ProductDetails\n                addToCartHandler={ this.addToCartHandler }\n                shoppingCartItens={ shoppingCartItens }\n                { ...props }\n              />) }\n            />\n            <Route\n              exact\n              path=\"/\"\n              render={ () => (\n                <MainPage\n                  addToCartHandler={ this.addToCartHandler }\n                  shoppingCartItens={ shoppingCartItens }\n                />\n              ) }\n            />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  const NOT_FOUND = 404;\n  const NOT_FOUND_IN_ARRAY = -1;\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  }).then((response) => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n    if (response.status === NOT_FOUND\n        || (contentType != null\n          && contentType.indexOf('javascript') === NOT_FOUND_IN_ARRAY)) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then((registration) => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}